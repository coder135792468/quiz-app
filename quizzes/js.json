[
    {
        "question": "What is the output?",
        "description": "alert(typeof(NaN));",
        "choices": ["number", "object", "string", "function"],
        "type": "radio",
        "correctAnswer": "number"
    },
    {
        "question": "You canâ€™t delete variables declared with var keyword by 'delete' operator.",
        "choices": ["true", "false"],
        "type": "radio",
        "correctAnswer": "true"
    },
    {
        "question": "What is the output?",
        "description": "alert(typeof([1, 2]) != (typeof {obg:23}));",
        "choices": ["true", "false"],
        "type": "radio",
        "correctAnswer": "false"
    },
    {
        "question": "JS numbers are always stored as double precision floating point numbers.",
        "choices": ["true", "false"],
        "type": "radio",
        "correctAnswer": "true"
    },
    {
        "question": "What is the output?",
        "description": "alert(0.1 + 0.2 == 0.3);",
        "choices": ["true", "false"],
        "type": "radio",
        "correctAnswer": "false"
    },
    {
        "question": "What function is used to merge arrays?",
        "choices": ["concat()", "merge()", "array_merge()", "add()"],
        "type": "radio",
        "correctAnswer": "concat()"
    },
    {
        "question": "What is the output?",
        "description": "function mlt(a, b) {\n  if(!(a && b)) {\n    return 0;\n  } else if(b == 1) {\n    return a;\n  } else {\n    return (a + mlt(a, b - 1));\n  }\n}\nconsole.log(mlt(3, 11));\nconsole.log(mlt(7, 1));",
        "type": "input",
        "correctAnswer": "337"
    },
    {
        "question": "What is the output?",
        "description": "(function(){\n  alert(typeof arguments);\n})();",
        "choices": ["object", "function", "undefined", "null"],
        "type": "radio",
        "correctAnswer": "object"
    },
    {
        "question": "Choose the numbers that are present in the output.",
        "description": "for(let i = 0; i < 100; i ++)\n  if(i % 10 == i - 10)\n    document.write(i + ',');",
        "choices": ["14", "17", "27", "9"],
        "type": "checkbox",
        "correctAnswer": ["14", "17"]
    },
    {
        "question": "What is the output?",
        "description": "var a = 5 && 8;\nvar b = 5 || 8;\nconsole.log(a + b);",
        "type": "input",
        "correctAnswer": "13"
    },
    {
        "question": "What is the output?",
        "description": "console.log((true+false)>2+true);",
        "choices": ["true", "false", "error"],
        "type": "radio",
        "correctAnswer": "false"
    },
    {
        "question": "What is the output?",
        "description": "const mul = x => y => x * y;\nconst res = mul(2)(5);\nconsole.log(res);",
        "type": "input",
        "correctAnswer": "10"
    },
    {
        "question": "Is this code valid?",
        "description": "a = 5;\nalert(a);",
        "choices": ["yes", "no"],
        "type": "radio",
        "correctAnswer": "yes"
    },
    {
        "question": "What is the output?",
        "description": "console.log((![]+[])[1]);",
        "type": "input",
        "correctAnswer": "a"
    },
    {
        "question": "List types of scopes available in Javascript?",
        "choices": ["Global Scope", "Local Scope", "Function Scope", "Class Scope"],
        "type": "checkbox",
        "correctAnswer": ["Global Scope", "Local Scope"]
    },
    {
        "question": "What is the output?",
        "description": "console.log(parseInt('1001', 2));",
        "type": "input",
        "correctAnswer": "9"
    },
    {
        "question": "This code generates an error.",
        "description": "'use strict';\nv = 17;",
        "choices": ["yes", "no"],
        "type": "radio",
        "correctAnswer": "yes"
    },
    {
        "question": "What is the output?",
        "description": "const createPerson = name => ({name});\nconsole.log(createPerson('John'));",
        "choices": ["{name: \"John\"}", "undefined", "name", "John"],
        "type": "radio",
        "correctAnswer": "{name: \"John\"}"
    },
    {
        "question": "What is the output?",
        "description": "const createPerson = name => {name};\nconsole.log(createPerson('John'));",
        "choices": ["{name: \"John\"}", "undefined", "name", "John"],
        "type": "radio",
        "correctAnswer": "undefined"
    },
    {
        "question": "Which value of the 'position' parameter of the insertAdjacentElement() allows to insert a child element after the current element?",
        "choices": ["afterend", "afterbegin", "beforeend", "beforebegin"],
        "type": "radio",
        "correctAnswer": "afterend"
    },
    {
        "question": "Which value of the 'position' parameter of the insertAdjacentElement() allows to insert a child element before the end of the current element (as the last child)?",
        "choices": ["beforeend", "beforebegin", "afterbegin", "afterend"],
        "type": "radio",
        "correctAnswer": "beforeend"
    },
        "question": "What is the difference between 'var' and 'let'?",
        "choices": ["'var' declares a function-scoped variable.", "'let' declares a block-scoped variable.", "'let' declares a function-scoped variable.", "'var' declares a block-scoped variable."],
        "type": "checkbox",
        "correctAnswer": ["'var' declares a function-scoped variable.", "'let' declares a block-scoped variable."]
    },
    {
        "question": "What is the difference between 'innerHTML' and 'textContent' properties of the Node interface?",
        "choices": ["'textContent' can prevent XSS attacks.", "'innerHTML' parses content as HTML.", "'textContent' uses straight text, does not parse HTML.", "'textContent' is faster", "'innerHTML' is faster", "'innerHTML' can prevent XSS attacks."],
        "type": "checkbox",
        "correctAnswer": ["'textContent' can prevent XSS attacks.", "'innerHTML' parses content as HTML.", "'textContent' uses straight text, does not parse HTML.", "'textContent' is faster"]
    }
]
